/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.*;

/** 
 * bfsDijkstra implements the breadth first algorithm using the Dijkstra
 * approach. The aim here is to construct a tree that marks the parent child
 * relationship between two nodes.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class bfsDijkstra 
{
	final int START = 0;
	final int JOIN = 1;
	final int ACK = 2;
	final int NACK = 3;
	int adj_graph[][], nodes, root, Infinity  = Integer.MAX_VALUE, cPhase=0;
	
	/** Parameters to enable execution with load */
	long loadValue=0, nval[];
	boolean found[];
	
	/** Abstract node representation */
	Node nodeSet[];

	/** Counter for measuring total atomic. */
        int ciso[];
	
	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, calling the methods responsible for BFS tree creation, 
	 * printing the output and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */
	public static void main(String []args)	throws Exception {
		String inputFile="inputbfsDijkstra", outputFile="outputbfsDijkstra";
		int i,j, totCom=0;
		boolean flag = false;
		
		bfsDijkstra bfs = new bfsDijkstra(); 
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				bfs.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option spcified");		
		}

		FileReader fr = new FileReader(inputFile);
		BufferedReader br = new BufferedReader(fr);
		String s = br.readLine();

		bfs.nodes = Integer.parseInt(s);
		s = br.readLine();
		bfs.root = Integer.parseInt(s);
		bfs.adj_graph = new int[bfs.nodes][bfs.nodes];
		
		j=0;
		while((s = br.readLine()) != null) {
			for(i=0; i<s.length(); i++)
				bfs.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
			j++;
		}
		
		bfs.found = new boolean[bfs.nodes];
		bfs.nodeSet = new Node[bfs.nodes];
		bfs.nval = new long[bfs.nodes];		

		bfs.ciso = new int[bfs.nodes];

		bfs.initialize();

		boolean newNode = false;
		while(true) {
			bfs.found = new boolean[bfs.nodes];
			bfs.nodeSet[bfs.root].currentPhase = bfs.cPhase;
			bfs.nodeSet[bfs.root].signal = bfs.START; 	
			
			for(i=0; i<bfs.cPhase; i++)
				bfs.broadCast();
				
			bfs.joinMessage();
			bfs.joinTree();
			newNode = bfs.foundCheck();	
			if(!newNode)
				break;

			for(i=bfs.cPhase; i>0; i--)
				bfs.echoReply(i);
	
			bfs.reset();
			bfs.cPhase++;
		}
			
		if(bfs.loadValue != 0) {	
			double sumval=0;
                        for(i=0; i<bfs.nodes; i++)
                                sumval = sumval + bfs.nval[i];

			if(sumval > 0)
                                System.out.println();
		}	

		bfs.isolatedCount();
	}

	void isolatedCount() {
                int isum=0; 
                for(int i=0; i<nodes; i++) 
                        isum = isum + ciso[i];
                System.out.println(isum);       
        }
	
	/** Initializes all the fields of the abstract node. */ 
	void initialize() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					nodeSet[i] = new Node();
					nodeSet[i].parent = Infinity;
					nodeSet[i].phaseDiscovered = -1;
					nodeSet[i].currentPhase = 0;
					nodeSet[i].tempCurrPhase = 0;
					
					if(i == root) {
						nodeSet[i].parent = 0;
						nodeSet[i].phaseDiscovered = 0;
					}
				}
			}
		}
	}
	
	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }

	/** Transmits the <code>START<\code> signal to all the children of a node.  */
	void broadCast() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(nodeSet[i].signal == START && !nodeSet[i].sentSig) {
						nodeSet[i].sentSig = true;
						for(int j=0; j<nodeSet[i].children.size(); j++)
							sendSignal(nodeSet[i].children.get(j), START, nodeSet[i].currentPhase);
					}
					
					if(loadValue != 0)
                                        	nval[i] = loadweight(nval[i]+i);
				}		
			}
		}
		
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(!nodeSet[i].sentSig && nodeSet[i].tempCurrPhase != 0) {
						nodeSet[i].currentPhase = nodeSet[i].tempCurrPhase;
						nodeSet[i].signal = nodeSet[i].tempSig;
						nodeSet[i].tempCurrPhase = 0;
					}
					
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
	}
	
	/** 
	 * Transmits the join message to all the undiscovered neighbors of the node discovered
	 * in previous phase.
	 */
	void joinMessage() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(nodeSet[i].phaseDiscovered == nodeSet[i].currentPhase) {
						for(int j=0; j<nodes; j++) {
							boolean flag = false;
							if(adj_graph[i][j] == 1) {	
								for(int k=0; k<nodeSet[i].neighborTalked.size(); k++)
									if(nodeSet[i].neighborTalked.get(k) == j) {
										flag = true;
										break;
									}
								if(!flag) {	
									nodeSet[i].neighborTalked.add(j);
									sendJoinMessage(j, i, JOIN, nodeSet[i].currentPhase+1);
								}	
							}
						}
					}
					
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
	}
	
	/** Merges new nodes to existing BFS Tree. */
	void joinTree() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(nodeSet[i].parent == Infinity) {
						messagePair msp = new messagePair();
						boolean flag = false;
						for(int j=0; j<nodeSet[i].sendMessage.size(); j++) {
							msp = nodeSet[i].sendMessage.get(j);
							if(!flag) {
								sendAck(msp.from, i, ACK);
								nodeSet[i].parent = msp.from;
								nodeSet[i].neighborTalked.add(msp.from);
								setChild(msp.from, i);
								found[i]=true;	flag=true;
							}	
							else {	
								nodeSet[i].neighborTalked.add(msp.from);
								sendAck(msp.from, i, NACK);
							}
						}
					}
					else {
						messagePair msp = new messagePair();
						for(int j=0; j<nodeSet[i].sendMessage.size(); j++) {
							msp = nodeSet[i].sendMessage.get(j);
							sendAck(msp.from, i, NACK);
							nodeSet[i].neighborTalked.add(msp.from);
						}					
					}

					if(loadValue != 0)	
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
		
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					nodeSet[i].sendMessage.clear();
					nodeSet[i].sendMessage.addAll(nodeSet[i].tempHolder);
					nodeSet[i].tempHolder.clear();

					if(loadValue != 0)					
						nval[i] = loadweight(nval[i]+i);				
				}
			}
		}
	}
	
	/** Tells whether all the nodes are part of the BFS tree or some nodes are left.
	 * 
	 * @return	true if all nodes are part of the BFS tree.
	 */
	boolean foundCheck() {
		int counter=0;
		boolean flag=false;
		for(int i=0; i<nodes; i++)
			if(found[i]) {
				counter++;
				break;
			}
		
		if(counter > 0)
			return true;
		else
			return false;	
	}
	
	/** 
	 * Replies are echoed back to root from all the children. 
	 *
	 * @param phs	A Phase indicator.
	 */
	void echoReply(int phs) {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(nodeSet[i].phaseDiscovered != cPhase+1 &&  nodeSet[i].phaseDiscovered == phs)
						sendAck(nodeSet[i].parent, i, ACK);

					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);				
				}
			}
		}
	}

	/** Resets the variables. */
	void reset() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					nodeSet[i].sendMessage = new ArrayList<messagePair>();
					nodeSet[i].signal = -1;
					nodeSet[i].sentSig = false;

					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
	}
	
	/** 
	 * Sets a node as the child node of another node. 
	 *
	 * @param aNode		Parent Node.
	 * @param uNode		Child Node.
	 */
	void setChild(int aNode, int uNode) {
		isolated { 
			/** Inside existing atomic operation, increment counter for atomic. */
			ciso[aNode] = ciso[aNode] + 1;

			nodeSet[aNode].children.add(uNode); 
		}
	}
	
	/** 
	 * Sends <code>ACK<\code> or <code>NACK<\code> signal to the sender of 
	 * <code>JOIN<\code> signal.
	 *
	 * @param aNode		Signal receiver.
	 * @param uNode		Signal sender.
	 * @param uSignal	<code>ACK<\code> or <code>NACK<\code> signal.
	 */
	void sendAck(int aNode, int uNode, int uSignal) {
		messagePair msp = new messagePair();
		msp.from = uNode; 	msp.signal = uSignal;
		isolated { 
			/** Inside existing atomic operation, increment counter for atomic. */
			ciso[aNode] = ciso[aNode] + 1;		

			nodeSet[aNode].tempHolder.add(msp); 
		}	
	}

	/** 
	 * Sends <code>JOIN<\code> signal to all the prospective children.
	 *
	 * @param aNode		Signal receiver.
	 * @param from		Signal sender.
	 * @param signal	<code>JOIN<\code> signal.
	 * @param phase		Current phase value.
	 */
	void sendJoinMessage(int aNode, int from, int signal, int phase) {
		isolated {
			/** Inside existing atomic operation, increment counter for atomic. */
			ciso[aNode] = ciso[aNode] + 1;

			messagePair msp = new messagePair();
			msp.from = from;	msp.signal = JOIN;
			nodeSet[aNode].sendMessage.add(msp);

			if(nodeSet[aNode].parent == Infinity)
				nodeSet[aNode].phaseDiscovered = phase;
		}	
	}

	/** 
	 * Sends <code>START<\code> signal to a node.
	 *
	 * @param aNode		Signal receiver.
	 * @param uSignal	<code>START<\code> signal.
	 * @param phase		Current phase value.
	 */
	void sendSignal(int aNode, int signal, int phase) {
		nodeSet[aNode].tempSig = signal;
		nodeSet[aNode].tempCurrPhase = phase;
	}
	
	/** 
	 * Writes the output to the user specified file.
	 * 
	 * @param  fileName	Name of the file in which output has to be stored.
	 * @throws 		input output exception if a failure in write occurs.
	 */
	void printOutput(String fileName) throws IOException {
		boolean flag;
		Writer output = null;
  		output = new BufferedWriter(new FileWriter(fileName));
  		
  		output.write("Root: " + root + "\n");
  		output.write("All (U,V) Pairs where U is parent and V is child \n");
  		for(int i=0; i<nodes; i++) {
  			flag = false;
  			for(int j=0; j<nodeSet[i].children.size(); j++) {
  				output.write("(" + i + "," + nodeSet[i].children.get(j) + ") ");
  				flag = true;
  			}
  			
  			if(flag)	
  				output.write("\n");
  		}
  		output.close();
	}
	
	/** Validates the output resulting from the execution of the algorithm. */
	void outputVerifier()
	{
		int i;
		int nodeCheck[] = new int[nodes];
		boolean flag = false;
		
		for(i=0; i<nodes; i++)
			if(nodeSet[i].children.size() > 0) {
				for(int j=0; j<nodeSet[i].children.size(); j++)
					nodeCheck[nodeSet[i].children.get(j)]++;	
			}
		nodeCheck[root]++;
		for(i=0; i<nodes; i++)
			if(nodeCheck[i] != 1)
				flag = true;

		if(!flag)
			System.out.println("Output verified");
	}
}

/** States the structure of message to be transmitted. */
class messagePair
{
	int from;
	int signal;
}

/**
 * <code>Node</code> specifies the structure for each abstract node
 * part of the BFS Dijkstra algorithm.
 */
class Node
{
	/** Specifies parent of a node. */
	int parent;
	
	/** Specifies the phase in which the node is discovered. */
	int phaseDiscovered;
	
	/** Specifies the current ongoing phase. */
	int currentPhase;
	int tempCurrPhase;
	
	/** Enumerates the set of children of the node. */
	ArrayList<Integer> children = new ArrayList<Integer>();
	
	/** Enumerates the neighbor communicated by a node. */
	ArrayList<Integer> neighborTalked = new ArrayList<Integer>();
	
	/** Holds all the messages received by a node. */
	ArrayList<messagePair> sendMessage = new ArrayList<messagePair>();
	ArrayList<messagePair> tempHolder = new ArrayList<messagePair>();
	
	int signal;
	int tempSig;
	boolean sentSig;
}
