/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.*;

/** 
 * leader_elect_dp aims to elect a leader from a set of nodes,
 * on the basis of leader election algorithm by David Peleg.
 * The algorithm is aimed towards general networks.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class leader_elect_dp 
{
	int adj_graph[][], nodes, idSet[], pulse=0;
	
	/** Parameters to enable execution with load */
	long loadValue=0, nval[];
	
	/** Abstract node representation */
	Node nodeSet[];

	/** Counter for measuring total atomic. */
        int ciso[];
	
	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, electing the leader and transmitting information, 
	 * printing the output and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */
	public static void main(String []args)	throws Exception {
		int i,j=0;
		String inputFile="inputldp16", outputFile="outputldp";
		boolean flag = false;		
	  
	  	leader_elect_dp ldp = new leader_elect_dp();
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				ldp.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option spcified");		
		}

		FileReader fr = new FileReader(inputFile);
		BufferedReader br = new BufferedReader(fr);
		String s = br.readLine();
		ldp.nodes = Integer.parseInt(s);
		ldp.idSet = new int[ldp.nodes];
		ldp.nodeSet = new Node[ldp.nodes];
		ldp.adj_graph = new int[ldp.nodes][ldp.nodes];
		ldp.nval = new long[ldp.nodes];
		
		ldp.ciso = new int[ldp.nodes];	

		while(!((s = br.readLine()).equals(" "))) {
			for(i=0; i<s.length(); i++)
				ldp.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
			j++;
		}
		
		j=0;
		while((s = br.readLine()) != null) {
			ldp.idSet[j] = Integer.parseInt(s);
			j++;
		}
		
		ldp.initialize();
		boolean nodeArr[] = new boolean[ldp.nodes];
			
		int count;
		int checkCounter=0;
		do {
			ldp.leaderElect();
			count=0;
			for(i=0; i<ldp.nodes; i++)
			if(ldp.nodeSet[i].complete)
					count++;
			if(count == ldp.nodes)
				break;
			checkCounter++;
		}while(true);

		for(i=0; i<ldp.nodes; i++)
			if(ldp.nodeSet[i].c >=2)
				ldp.transmitLeader(i, nodeArr, i);
		
		if(ldp.loadValue != 0) {
			double sumval=0;
                        for(i=0; i<ldp.nodes; i++)
                                sumval = sumval + ldp.nval[i];

			if(sumval > 0)
                                System.out.println();
		}

		ldp.isolatedCount();  		
	}

	void isolatedCount() {
                int isum=0; 
                for(int i=0; i<nodes; i++) 
                        isum = isum + ciso[i];
                System.out.println(isum);       
        }

	/** Initializes all the fields of the abstract node. */
	void initialize() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					int j, counter=0;
					nodeSet[i] = new Node();
					nodeSet[i].x = idSet[i];
					nodeSet[i].d = 0;
					nodeSet[i].leaderId = i;
					nodeSet[i].b = 1;
					nodeSet[i].c = 0;
					nodeSet[i].complete = false;
					
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1)
							counter++;
					
					nodeSet[i].neighbors = new int[counter];
					counter=0;
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1) {
							nodeSet[i].neighbors[counter] = j;
							counter++;
						}
				}
			}
		}
	}

	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */	
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }

	/** Aims at selecting the leader from a set of nodes. */
	void leaderElect() {
		int maxd[] = new int[nodes];
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(!nodeSet[i].complete) {
						maxd[i] = nodeSet[i].d;
						Message sentMessage = new Message();
						for(int j=nodeSet[i].messageHolder.size()-1; j>=0; j--) {
							sentMessage = nodeSet[i].messageHolder.get(j);
							if(maxd[i] < sentMessage.d)
								maxd[i] = sentMessage.d;
						}
					}

					if(loadValue != 0)	
						nval[i] = loadweight(nval[i]+i);				
				}
			}
		}
		
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(!nodeSet[i].complete) {				
						for(int j=0; j<nodeSet[i].neighbors.length; j++)
							sendMessage(nodeSet[i].neighbors[j], nodeSet[i].x, maxd[i]);
					}

					if(loadValue != 0)					
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
		
		pulse++;
		boolean cflag[] = new boolean[nodes];
	
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(!nodeSet[i].complete) {
						int j;
						boolean flag = false;
						Message sentMessage = new Message();
						for(j=0; j<nodeSet[i].messageHolder.size(); j++) {
							sentMessage = nodeSet[i].messageHolder.get(j);
							if(sentMessage.d == -1) {	
								cflag[i] = true;
								flag = true;
								break;
							}
						}
						
						if(!flag) {
							int y = Integer.MIN_VALUE, z= nodeSet[i].d;
							for(j=nodeSet[i].messageHolder.size()-1; j>=0; j--) {
								sentMessage = nodeSet[i].messageHolder.get(j);
								if(y < sentMessage.x)
									y = sentMessage.x;
							}
							for(j=nodeSet[i].messageHolder.size()-1; j>=0; j--) {
								sentMessage = nodeSet[i].messageHolder.get(j);
								if(y > sentMessage.x)
									nodeSet[i].messageHolder.remove(j);
							}
							if(y > nodeSet[i].x) {
								nodeSet[i].x = y;
								nodeSet[i].b = 0;
								nodeSet[i].d = pulse;
							}
							if(nodeSet[i].b == 0)	
								flag = true;
							if(!flag) {	
								if(y < nodeSet[i].x) {
									nodeSet[i].c = 1;
									flag = true;
								}
								if(!flag) {
									for(j=0; j<nodeSet[i].messageHolder.size(); j++) {
										sentMessage = nodeSet[i].messageHolder.get(j);
										if(z < sentMessage.d)
											z = sentMessage.d;
									}
									if(z > nodeSet[i].d) {
										nodeSet[i].d = z;
										nodeSet[i].c = 0;
										flag = true;
									}
									if(!flag) {
										nodeSet[i].c++;
										if(nodeSet[i].c >= 2)
											cflag[i] = true;
									}
								}
							}		
						}
					}
				
					if(loadValue != 0)	
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}

		finish {
			for(int i=0; i<nodes; i++) {
				async {
					if(!nodeSet[i].complete) {
						if(cflag[i]) {
							nodeSet[i].complete = true;
							for(int j=0; j<nodeSet[i].neighbors.length; j++)
								sendMessage(nodeSet[i].neighbors[j], nodeSet[i].x, -1);
						}
					}

					if(loadValue != 0)					
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}
	}
	
	/** 
	 * Transmits the message from one node to another.
	 *
	 * @param	aNode		Node which recieves message.
	 * @param	x		Message value.
	 * @param	d		Distance value.
	 */
	void sendMessage(int aNode, int x, int d) {
		isolated {
			/** Inside existing atomic operation, increment counter for atomic. */
			ciso[aNode] = ciso[aNode] + 1;

			Message sentMessage = new Message();
			sentMessage.x = x;		sentMessage.d = d;
			nodeSet[aNode].messageHolder.add(sentMessage);
		}	
	}

	/** 
	 * Transmits the leader information to all the nodes.
	 *
	 * @param	aNode		Node which transmits.
	 * @param	nodeArr		Array to keep track of nodes visited.
	 * @param	leader		Leader Node.
	 */
	void transmitLeader(int aNode, boolean[] nodeArr, int leader) {
		if(nodeArr[aNode])
			return;
		else {
			nodeSet[aNode].leaderId = leader;
			nodeArr[aNode] = true;
			for(int i=0; i<nodeSet[aNode].neighbors.length; i++)
				transmitLeader(nodeSet[aNode].neighbors[i],nodeArr,leader);
		}
	}
	
	/** 
	 * Writes the output to the user specified file.
	 * 
	 * @param  fileName	Name of the file in which output has to be stored.
	 * @throws 		input output exception if a failure in write occurs.
	 */
	void printOutput(String outputFile) throws IOException {
		Writer output = null;
	  	output = new BufferedWriter(new FileWriter(outputFile));
		for(int i=0; i<nodes; i++)
			if(nodeSet[i].c >=2)
				output.write("Leader is node " + i + " : Its Value " + nodeSet[i].x);
		output.close();
	}
	
	/** Validates the output resulting from the execution of the algorithm. */
	void outputVerifier() {
  		int max = Integer.MIN_VALUE, leaderNode=-1;
  		boolean flag = false; 
  		for(int i=0; i<nodes; i++)
			if(max < idSet[i]) {
				leaderNode = i;	
				max = idSet[i];
			}
		if(max == nodeSet[nodeSet[0].leaderId].x) {
			for(int i=0; i<nodes; i++)
				if(nodeSet[i].leaderId != leaderNode) {
					flag = true;
				}	
			if(!flag)
				System.out.println("Output verified");
		}		
  	}
}

/** Defines the structure for a message. */
class Message
{
	int x;
	int d;
}

/**
 * <code>Node</code> specifies the structure for each abstract node
 * part of the Leader election algorithm.
 */
class Node extends Message
{
	/** Specifies the identifier of the leader. */
	int leaderId;
	int b;
	int c;
	
	/** States when the leader identification is over. */
	boolean complete;
	
	/** Specifies the set of the neighbors for a node. */
	int neighbors[];
	ArrayList<Message> messageHolder = new ArrayList<Message>();
}
