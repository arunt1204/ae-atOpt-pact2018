/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.*;

/** 
 * leader_elect_dp aims to elect a leader from a set of nodes,
 * on the basis of leader election algorithm by Hirschberg and Sinclair.
 * The algorithm is aimed towards unidirectional ring networks.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class leader_elect_lcr
{
	int processes, IdStore[];
	
	/** Parameters to enable execution with load */
	long loadValue=0, nval[];
	
	/** Abstract node representation */
	Process processSet[];
 
 	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, electing the leader and transmitting information, 
	 * printing the output and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */
  	public static void main(String []args) throws Exception
  	{
		String inputFile = "inputLCR100.txt", outputFile = "outputLCR.txt";
		int j=0, i, totCom=0;
		boolean flag=false, loadCompute=false;
		
		leader_elect_lcr le = new leader_elect_lcr(); 
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				le.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option spcified");		
		}
	  
	  	FileReader fr = new FileReader(inputFile);
	  	BufferedReader br = new BufferedReader(fr);
	  	String s = br.readLine();
	  	le.processes = Integer.parseInt(s);
	  	le.IdStore = new int[le.processes];
	  	le.processSet = new Process[le.processes];
		le.nval = new long[le.processes];
 	
	  	while((s = br.readLine()) != null) {
			le.IdStore[j] = Integer.parseInt(s);
		  	j++;
	  	}
	  	
		le.initialize();
			
		long startTime = System.nanoTime();
		for(int round=0; round<le.processes; round++)
			le.leader_elect();
		le.transmitLeader();
		long finishTime = System.nanoTime();
		long estimatedTime = finishTime - startTime;
		System.out.println("Start Time: " + startTime + "\t Finish Time: " + finishTime + "\t Estimated Time: " + estimatedTime);

		le.printii(outputFile);
	  	
	  	if(flag)
	  		le.outputVerifier();

		if(le.loadValue != 0) {	
			double sumval=0;
                        for(i=0; i<le.processes; i++)
                                sumval = sumval + le.nval[i];

			if(sumval > 0)
                                System.out.println();
		}
  	}

	/** Initializes all the fields of the abstract node. */
	void initialize() {
  		finish {
  			for(int i=0; i<processes; i++) {
        			async {
        				processSet[i] = new Process();
          				processSet[i].id = IdStore[i];
          				processSet[i].leaderId = processSet[i].id;
          				processSet[i].send = processSet[i].id;
          				processSet[i].status = false;	
        			}
        		}
  		}
  	}

 	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */	
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }
 	
 	/** Aims at selecting the leader from a set of nodes. */
  	void leader_elect() {
  		finish {
  			phaser ph = new phaser();
  			for(int i=0; i<processes; i++) {
	  			async phased(ph) {
	  				int x = (i + 1) % (processes);
	  				int sval = processSet[i].send;
					sendMessage(x, sval);
					
					next;
					
					if(processSet[i].recievedId > processSet[i].leaderId) {
						processSet[i].send = processSet[i].recievedId;
						processSet[i].leaderId = processSet[i].recievedId;
					}
					else if(processSet[i].recievedId == processSet[i].id) {
						processSet[i].status = true;
						processSet[i].leaderId = processSet[i].id;
					}
					
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
	  			}
			}
  		}
  	}
  
  	/** Transmits the message from one node to another. */
  	void transmitLeader() {
		int i,leader;
		int k[] = new int[1];
	  	for(i=0; i<processes; i++)
			if(processSet[i].status)
				k[0]=i;
		leader = k[0];
		for(i=0; i<processes; i++) {
	  		k[0] = (k[0]+1)%processes;
		  	setLeader(leader, k[0]);	
		}
		processSet[leader].leaderId = leader;
  	}
  
  	/** 
  	 * Sets the leader for a node.
  	 * 
  	 * @param	uNode		Leader node.
  	 * @param	aNode		Node whose leader has to be set.
  	 */
  	void setLeader(int uNode, int aNode) {
		processSet[aNode].leaderId = uNode;
  	}  

	/** 
	 * Sends message to the neighbor.
	 * 
	 * @param	receiver	Node which receives the message.
	 * @param	sval		Message value.
	 */
  	void sendMessage(int receiver, int sval) {
		processSet[receiver].recievedId = sval;
  	}
  
  	/** 
	 * Writes the output to the user specified file.
	 * 
	 * @param  fileName	Name of the file in which output has to be stored.
	 * @throws 		input output exception if a failure in write occurs.
	 */
  	void printii(String fileName) throws IOException {
  		Writer output = null;
  		output = new BufferedWriter(new FileWriter(fileName));
		output.write("\n Leader: " + processSet[0].leaderId);
        	output.close();
  	}

	/** Validates the output resulting from the execution of the algorithm. */  	
  	void outputVerifier() {
  		int max = Integer.MIN_VALUE;
  		for(int i=0; i<processes; i++)
			if(max < IdStore[i])
				max = IdStore[i];
		if(max == processSet[processSet[0].leaderId].id)
			System.out.println("Output verified");
  	}
}

/**
 * <code>PROCESS</code> specifies the structure for each abstract node
 * part of the Leader election algorithm.
 */
class Process
{
	/** Specifies identifier for each node. */
  	int id;
  	
  	/** Represents the Identifier that the process will send to its neighbor. */
  	int send;

	/** Represents the Identifier of the leader. */  
  	int leaderId;
  	
	/** Represents the Identifier that the process receives from its neighbor. */
  	int recievedId;				
  
  	/** Represents the status of the process and will be set to true for leader. */
  	boolean status;
}
