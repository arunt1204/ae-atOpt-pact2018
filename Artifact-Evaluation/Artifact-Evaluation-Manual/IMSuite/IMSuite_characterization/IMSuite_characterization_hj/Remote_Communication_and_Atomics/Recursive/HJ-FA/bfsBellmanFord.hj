/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.*;

/** 
 * bfsBellmanFord implements the breadth first algorithm using the Bellman Ford
 * approach. The aim here is to output the distance of every node from the 
 * root. 
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */

public class bfsBellmanFord 
{
	int nodes, root, Infinity = Integer.MAX_VALUE, adj_graph[][];
	int diameter;

	/** Parameters to enable execution with load */
	long loadValue=0, nval[];

	/** Abstract node representation */
	Node nodeSet[];

	/** Counter for measuring total asyncs. */ 
	int casync[];
	
	/** Counter for measuring total finishes. */ 
	int cfinish[];
	
	/** Counter for measuring total isolated. */ 
	int ciso[];
	
	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, calling the <code>bfsForm</code>, printing the output
	 * and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */   
	public static void main(String []args) throws Exception {
		String inputFile = "inputbfsBellman16.txt", outputFile = "outputbfsBellman.txt";
		int i,j;
		boolean flag = false;
		
		bfsBellmanFord bfs = new bfsBellmanFord();
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				bfs.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option specified");		
		}

		FileReader fr = new FileReader(inputFile);
		BufferedReader br = new BufferedReader(fr);
		String s = br.readLine();

		bfs.nodes = Integer.parseInt(s);
		s = br.readLine();
		bfs.root = Integer.parseInt(s);
		bfs.adj_graph = new int[bfs.nodes][bfs.nodes];
		bfs.nval = new long[bfs.nodes];
	
		bfs.casync = new int[bfs.nodes];
		bfs.cfinish = new int[bfs.nodes];
		bfs.ciso = new int[bfs.nodes];

		j=0;
		while((s = br.readLine()) != null) {
			for(i=0; i<s.length(); i++)
				bfs.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
			j++;
		}
		
		bfs.nodeSet = new Node[bfs.nodes];

		bfs.initialize();

		bfs.bfsForm(bfs.root);

		if(bfs.loadValue != 0) {
			double sumval=0;
			for(i=0; i<bfs.nodes; i++)
				sumval = sumval + bfs.nval[i];

			if(sumval > 0)
                                System.out.println();
		}

		/** Call to method for computing total Async, Finish and Isolated. */
		bfs.totalCount();
	}

	void totalCount() {
		int asum=0,fsum=0,isum=0;
		for(int i=0; i<nodes; i++) {
			asum = asum + casync[i];
			fsum = fsum + cfinish[i];
			isum = isum + ciso[i];
		}
		System.out.println(fsum);
		System.out.println(asum);
		System.out.println(isum);	
	}
	
	/** Initializes all the fields of the abstract node. */ 
	void initialize() {
		finish {
			for(int i=0; i<nodes; i++) {
				async {
					int j,counter=0;
					nodeSet[i] = new Node();
					nodeSet[i].visited = false;
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1)
							counter++;
					
					nodeSet[i].neighbors = new int[counter];

					counter=0;
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1) {
							nodeSet[i].neighbors[counter] = j;
							counter++;
						}
			
					if(i != root)					
						nodeSet[i].distance=Infinity;
					else
						nodeSet[i].distance=0;
				}
			}
		}
	}

	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */
	long loadweight(long weight)
	{
		long j=0;
		for(long i=0; i<loadValue; i++)
			j++;
		return j+weight;
	}
	
	
	/** 
	 * Performs the task of creating BFS. Each node sends its value of distance from
	 * the root to all its neighbors. A node updates its distance variable only if it
	 * receives a value smaller than the existing.
	 */	
	void bfsForm(int aNode) {
		boolean flag= false;
		isolated {
			if(!nodeSet[aNode].visited)
				flag = true;

			/** Inside existing isolated operation, increment counter for isolated. */		
			ciso[aNode] = ciso[aNode] + 1;
		}
		
		if(flag) {
			isolated { 
				/** Inside existing isolated operation, increment counter for isolated. */		
				ciso[aNode] = ciso[aNode] + 1;

				/** Finish statements, increment counter for finish. */		
				cfinish[aNode] = cfinish[aNode] + 2;

				nodeSet[aNode].visited = true; 
			}
				
			finish {
				for(int i=0; i<nodeSet[aNode].neighbors.length; i++) {
					async {
						isolated {
							/** Async statements, increment counter for async. */         
							casync[aNode] = casync[aNode] + 1;          
						}
						setDistance(nodeSet[aNode].neighbors[i], nodeSet[aNode].distance);

						if(loadValue != 0) {
							long retVal = loadweight(nval[i]+i);
						}
					}
				}
			}	
			
			finish {
				for(int i=0; i<nodeSet[aNode].neighbors.length; i++) {
					async {
						isolated {
							/** Async statements, increment counter for async. */         
							casync[aNode] = casync[aNode] + 1;
						}
						bfsForm(nodeSet[aNode].neighbors[i]);
				
						if(loadValue != 0) {
							long retVal = loadweight(nval[i]+i);
						}
					}
				}
			}
		}
	}
	
	/** 
	 * Sends the distance value to a neighbor.
	 *
	 * @param neighbor	Receiving node.
	 * @param distance	Value to be sent.
	 */
	void setDistance(int neighbor, int distance) {
		isolated {
			/** Inside existing isolated operation, increment counter for isolated. */		
			ciso[neighbor] = ciso[neighbor] + 1;

			if(nodeSet[neighbor].distance > distance) {	
				nodeSet[neighbor].distance = distance+1;
				nodeSet[neighbor].visited = false;
			}
		}
	}
}

/**
 * <code>Node</code> specifies the structure for each abstract node
 * part of the BFS Bellman Ford algorithm.
 */ 
class Node
{
	/** Tells distance of a node from the root. */
	int distance;

	/** Tracks all the neighbors of a node.	*/			
	int neighbors[];

	/** Specifies if a node has already been visited or not. */	
	boolean visited;
}
