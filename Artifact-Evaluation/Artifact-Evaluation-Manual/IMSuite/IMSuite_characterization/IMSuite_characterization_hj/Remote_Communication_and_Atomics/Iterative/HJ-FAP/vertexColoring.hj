/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.Random;

/** 
 * vertexColoring aims to color the vertices of a tree with 
 * three colors.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class vertexColoring 
{
 	int adj_graph[][], parent[], nodes, root, label, nlabel[], colormat[];

	/** Parameters to enable execution with load */
	long loadValue=0, nval[];
	
	/** Abstract node representation */
 	Node nodeSet[];
 	boolean again[];
 	
 	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input 
	 * from the user specified file, coloring the vertices of the 
	 * tree, printing the output and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */ 
 	public static void main(String []args) throws Exception {
		String inputFile="inputvertexColoring16.txt", outputFile="outputvertexColoring.txt";
		int j=0, i;
		boolean flag=false;
		
		vertexColoring vc = new vertexColoring(); 
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				vc.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option spcified");		
		}

		FileReader fr = new FileReader(inputFile);
		BufferedReader br = new BufferedReader(fr);
		String s = br.readLine();
		vc.nodes = Integer.parseInt(s);
		vc.parent = new int[vc.nodes];
		vc.nlabel = new int[vc.nodes];
		vc.nodeSet = new Node[vc.nodes];
		vc.again = new boolean[vc.nodes];
		vc.adj_graph = new int[vc.nodes][vc.nodes];
		s = br.readLine();
		vc.root = Integer.parseInt(s);
		vc.nval = new long[vc.nodes];

		j=0;
		while(!((s = br.readLine()).equals(" "))) {
			for(i=0; i<s.length(); i++)
				vc.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
			j++;
		}
		
		j=0;
		while((s = br.readLine()) != null) {
			vc.parent[j] = Integer.parseInt(s);
			j++;
		}
		
		vc.initialize();
			
		vc.run();
		vc.six2three();

		if(vc.loadValue != 0) {	
			double sumval=0;
                        for(i=0; i<vc.nodes; i++)
                                sumval = sumval + vc.nval[i];

			if(sumval > 0)
                                System.out.println();
		}
 	}

	/** Initializes all the fields of the abstract node. */	
 	void initialize() {
 		finish {
 			for(int i=0; i<nodes; i++) {
				async {
					int j, count=0;
					nlabel[i] = i;
					nodeSet[i] = new Node();
					nodeSet[i].parent = parent[i];
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1 && nodeSet[i].parent != j)
							count++;
					nodeSet[i].children = new int[count];		count=0;
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1 && nodeSet[i].parent != j) {
							nodeSet[i].children[count] = j;
							count++;
						}
					nodeSet[i].color = nlabel[i];	
				}
 			}
 		}	
 		label = (int)(Math.log(nodes)/Math.log(2));
 		if((1 << label) < nodes)
 			label++;
 	}
 
	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */	
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }	

	/** Runs the algorithm till the graph consists of atmost six colors. */		
 	void run() {
 		boolean cflag = false;
 		nodeSet[root].color = 0;
		do {
			sixColor();
			cflag = checkAgain();
 		}while(cflag);				
	}
	
	/**
	 * Determines the number of different colors used in the graph.
	 *
	 * @return 	true if there is no color >= 6.
	 */
	boolean checkAgain() {
		boolean flag = false;
		for(int i=0; i<nodes; i++)
			if(again[i]) {
				flag = true;
				break;
			}
		return flag;	
	}
 
	/** Reduces the number of colors used in the graph to six. */
 	void sixColor() {
		finish { 
			phaser ph = new phaser();		  
			for(int i=0; i<nodes; i++) {
				async phased(ph) {
					for(int j=0; j<nodeSet[i].children.length; j++)
						sendColor(nodeSet[i].children[j], nodeSet[i].color);
					
					next;

					if(i != root) {
						again[i] = false;
						int xored = nodeSet[i].receivedColor ^ nodeSet[i].color;
    	
						for(int k=0; k<label; k++) {
							int pval = 1 << k;
							int nand = xored & pval;
							if(nand == pval) {
								int nxored = nodeSet[i].color & pval;
								if(nxored == 0)
									nodeSet[i].color = 2*k + 0;
								else
									nodeSet[i].color = 2*k + 1;
								break;
							} 
						}
 						if(nodeSet[i].color >= 6)
 							again[i] = true;
					}
					
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
 				}
 			}
 		}
	}		
 
 	/** Reduces the number of colors from six to three. */
 	void six2three() {
 		int i=0;
 		for(int x=5; x>2; x--) {
 			Random r = new Random();
 			int ncolor = r.nextInt(3);
 			shiftDown();
 			if(nodeSet[root].color == ncolor)
 				ncolor = (ncolor+1)%3;
 			nodeSet[root].color = ncolor;
	  
			finish {
				for(i=0; i<nodes; i++) {
					async {
						int cparent=0,cchild=0;
						if(nodeSet[i].color == x) {
							cparent=getColor(nodeSet[i].parent);
					
							if(nodeSet[i].children.length >0)
								cchild=getColor(nodeSet[i].children[0]);
							if(cparent+cchild == 1)
								nodeSet[i].color=2;
							else if(cparent+cchild == 2)
								nodeSet[i].color=1;
							else if(cparent+cchild == 3) {
								if(cparent != 0 && cchild != 0)
									nodeSet[i].color=0;
								else
									nodeSet[i].color=1;
							}
							else if(cparent+cchild == 4) {
								if(cparent != 0 && cchild != 0)
									nodeSet[i].color=0;
								else
									nodeSet[i].color=1;
							}	 					
							else if(cparent+cchild == 5) {
								if(cparent != 0 && cchild != 0)
									nodeSet[i].color=0;
								else
									nodeSet[i].color=1;
							}
							else
								nodeSet[i].color = 0;
	 					}
	 					
						if(loadValue != 0)
							nval[i] = loadweight(nval[i]+i);
	 				}
	 			}
	 		}
	 	}			
 	}
 	
 	/** Shifts the color of parent down to its children. */
 	void shiftDown() {
		finish {
			phaser ph = new phaser();
			for(int i=0; i<nodes; i++) {
				async phased(ph) {
					for(int j=0; j<nodeSet[i].children.length; j++)
						sendColor(nodeSet[i].children[j], nodeSet[i].color);
					
					next;

					if(i != root)
						nodeSet[i].color = nodeSet[i].receivedColor;
					
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				}
			}
		}			
 	}
 	
	/**
	 * Provides the color of the <code>aNode<\code>.
	 * @param   aNode 	node whose color value is required.
	 * @return  		color of <code>aNode<\code>.
	 */ 	
 	int getColor(int aNode) {
 		return nodeSet[aNode].color;
 	}
 	
 	/**
	 * Sends the color of the parent node to a child node.
	 * @param   childNode 	node whose color is to be changed
	 * @return  acolor	color of the parent node.
	 */
 	void sendColor(int childNode, int acolor) {
 		nodeSet[childNode].receivedColor = acolor;
 	}
}

/**
 * <code>Node</code> specifies the structure for each abstract node,
 * part of the Vertex coloring algorithm.
 */
class Node
{
	/** Specifies the parent of a node. */
	int parent;
	
	/** Identifies the children of a node. */				
	int children[];
	
	/** Specifies the color of a node. */	
	int color;
	
	/** Specifies the color received by a node. */
	int receivedColor; 
}
