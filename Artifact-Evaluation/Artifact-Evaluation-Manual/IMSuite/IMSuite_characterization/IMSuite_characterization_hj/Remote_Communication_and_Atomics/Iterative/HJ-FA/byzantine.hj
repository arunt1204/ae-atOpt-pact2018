/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */

import java.io.*;
import java.util.*;

/** 
 * byzantine aims to reach a consensus among a set of nodes.
 * Nodes can be classified as traitors and non-traitors. 
 * Traitors aim to disrupt the consensus.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class byzantine {
        int adj_graph[][], traitorId[], simpleNodeId[], randomVote[], totalNodes, nodes, traitorCount;
        
        /** Parameters to enable execution with load */
	long loadValue=0, nval[];
        boolean ifTraitor[];
        
        /** Abstract node representation */
	Nd allNodes[];

	/** Global coin toss value. */
        final int gToss = coinToss();

	/** 
	 * Sets the value of global coin toss.
	 * The value can be either 0 or 1.
	 *
	 * @return 	value of coin toss.
	 */
        int coinToss(){
                Random r = new Random(100);
                int ret = r.nextInt(2);
                return ret;
        }

	/** Counter for measuring total atomic. */
        int ciso[];

	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, consensus decision fromulation, printing the output 
	 * and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */
        public static void main(String []args) throws Exception {
                String inputFile = "inputbyzantine16.txt", outputFile = "outputbyzantine.txt";
                int j=0, i, totCom=0;
                boolean flag=false;

		byzantine bz = new byzantine();
                for(i=0; i<args.length; i++) {
                        if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				bz.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option specified");
                }

                FileReader fr = new FileReader(inputFile);
                BufferedReader br = new BufferedReader(fr);
                String s = br.readLine();

                bz.totalNodes = Integer.parseInt(s);
                bz.traitorCount = bz.totalNodes/8 - 1;
                bz.nodes = bz.totalNodes - bz.traitorCount;
                bz.adj_graph = new int[bz.totalNodes][bz.totalNodes];
                bz.randomVote = new int[bz.totalNodes];
                bz.traitorId = new int[bz.traitorCount];
                bz.allNodes = new Nd[bz.totalNodes];
                bz.ifTraitor = new boolean[bz.totalNodes];
		bz.nval = new long[bz.totalNodes];                

		bz.ciso = new int[bz.totalNodes];

		/** Global parameters used for consensus. */
                final int L = (5*bz.totalNodes/8)+1;
	        final int H = (3*bz.totalNodes/4)+1;
        	final int G = (7*bz.totalNodes/8);
        	
                while(!((s = br.readLine()).equals(" "))) {
                        for(i=0; i<s.length(); i++)
                                bz.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
                        j++;
                }

                j=0;
                while(!((s = br.readLine()).equals(" ")))
                        for(i=0; i<s.length(); i++) {
                                bz.randomVote[j] = Character.digit(s.charAt(i), 10);
                                j++;
                        }

                j=0;
                while((s = br.readLine()) != null) {
                        bz.traitorId[j] = Integer.parseInt(s);
                        j++;
                }
                
                for(i=0; i<bz.totalNodes; i++)
        		for(j=0; j<bz.traitorCount; j++) 
				if(bz.traitorId[j] == i) {
					bz.ifTraitor[i] = true;
					break;
				}	

		int diam = bz.getDiameter();
		bz.initialize();

	        for(i=0; i<bz.totalNodes/8+1; i++) {
               		for(j=0; j<diam; j++)
               	        	bz.voteAll();
               	        bz.voteDecision(L, H, G);
               	}

		if(bz.loadValue != 0) {
			double sumval=0;
        	        for(i=0; i<bz.totalNodes; i++)
        	               sumval = sumval + bz.nval[i];

			if(sumval > 0)
                                System.out.println();
		}
		
		bz.isolatedCount();
        }

	void isolatedCount() {
                int isum=0; 
                for(int i=0; i<totalNodes; i++) 
                        isum = isum + ciso[i];
                System.out.println(isum);       
        }

	/** Initializes all the fields of the abstract node. */ 
        void initialize() {
        	finish {
                        for(int i=0; i<totalNodes; i++) {
                                async {
					allNodes[i] = new Nd();
					Nd Nde = allNodes[i];
                                        Nde.id = i;
                                        Nde.permanent=0;

                                        int counter=0, j=0; 
                                        for(j=0; j<totalNodes; j++)
                                                if(adj_graph[i][j] == 1)
                                                        counter++;
					
					Nde.neighbors = new int[counter];
					counter=0;
					for(j=0; j<totalNodes; j++)
                                                if(adj_graph[Nde.id][j] == 1) {
                                                	Nde.neighbors[counter] = j;
                                                        counter++;
                                                }        
					
					Nde.voteReceived = new boolean[totalNodes];
					Nde.voteReceived[i] = true;
					Nde.vote = new int[Nde.neighbors.length+1];
					
					if(ifTraitor[i]) {
						Random r = new Random(i);
						for(int k=0; k<Nde.neighbors.length; k++)
							Nde.vote[k] = r.nextInt(2);
						Nde.vote[Nde.neighbors.length] = randomVote[i];	
					}
					else
						Nde.vote[Nde.neighbors.length] = randomVote[i];		
                                }
                        }
    		}
	}

	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */	
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }

	/** Broadcasts vote from each node to all the other nodes. */
        void voteAll() {
                finish {
                        for(int i=0; i<totalNodes; i++) {
                                async {
                                	if(allNodes[i].messageHolder.size() > 0) {
                                		Message msg = new Message();
                                		for(int j=0; j<allNodes[i].messageHolder.size(); j++) {
                                			msg = allNodes[i].messageHolder.get(j);
                                			for(int k=0; k<allNodes[i].neighbors.length; k++)
								sendMessage(allNodes[i].neighbors[k], msg.source, msg.vote);                           		
                                		}	
                                	}
                                	else {
                                		if(!ifTraitor[i])
                                			for(int j=0; j<allNodes[i].neighbors.length; j++)
                                				sendMessage(allNodes[i].neighbors[j], i, allNodes[i].vote[allNodes[i].neighbors.length]);
                                		else
                                			for(int j=0; j<allNodes[i].neighbors.length; j++)
                                				sendMessage(allNodes[i].neighbors[j], i, allNodes[i].vote[j]);
                                	}
                                	
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				 }
                        }
                }
                
                finish {
                        for(int i=0; i<totalNodes; i++) {
                                async {
                                	allNodes[i].messageHolder.clear();
	                                	
                                	Message msg = new Message();
                 			for(int j=0; j<allNodes[i].tempMessageHolder.size(); j++) {
                 				msg = allNodes[i].tempMessageHolder.get(j);
                 				if(!allNodes[i].voteReceived[msg.source]) {
                 					allNodes[i].receive.add(msg.vote);
                 					allNodes[i].voteReceived[msg.source] = true;
                 					allNodes[i].messageHolder.add(msg);
                 				}
                 			}
                 			allNodes[i].tempMessageHolder.clear();

					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
                                }
			}
		}			                                
        }

	/** 
	 * Sends the message of a node to the destination node's mailbox.
	 *
	 * @param receiver	Destination node.
	 * @param source	Source of message.
	 * @param vote		Message of source.
	 */
	void sendMessage(int receiver, int source, int vote) {
		Message msg = new Message();
		msg.setMessage(source, vote);
		isolated { 
			/** Inside existing atomic operation, increment counter for atomic. */
			ciso[receiver] = ciso[receiver] + 1;

			allNodes[receiver].tempMessageHolder.add(msg); 
		}	
	}

	/** 
	 * Consensus decision is made based on the majority of votes.
	 *
	 * @param L	Global variable.
	 * @param H	Global variable.
	 * @param G	Global variable.
	 */
        void voteDecision(int H, int L, int G) {
                finish {
                        for(int i=0; i<totalNodes; i++) {
                                async {
                                        int v0=0, v1=0,maj=-1,tally=0,j=0,threshold=0;
                                        Nd nd = allNodes[i];

                                        for(j=0; j<nd.receive.size(); j++) {
                                                int rec = nd.receive.get(j);
                                                if(rec == 1)
                                                        v1++;
                                                else
                                                        v0++;
                                        }

                                        if (nd.vote[nd.neighbors.length] == 1)
                                                v1++;
                                        else
                                                v0++;

                                        if(v1 > v0) {
                                                maj=1;
                                                tally=v1;
                                        }
                                        else {
                                                maj=0;
                                                tally=v0;
                                        }
                                        threshold = gToss == 0? L: H;
                                        
                                        if(tally > threshold)
                                                nd.vote[nd.neighbors.length] =  maj;
                                        else
                                                nd.vote[nd.neighbors.length] =  0;

                                        if(tally > G && nd.permanent == 0) {
                                                nd.decision = maj;
                                                nd.permanent = 1;
                                        }
                                        nd.receive.clear();
					nd.voteReceived = new boolean[totalNodes];
					nd.voteReceived[i] = true;
					nd.messageHolder.clear();
	
					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
                                }
                        }
                }
        }
        
        /**
	 * Calculates the diameter for the graph from the root by selecting the 
	 * maximum distance of a node from the root.
	 *
	 * @return	Value of diameter form the root.
	 */
	int getDiameter() {
		int diameter[] = new int[totalNodes];

		finish {
			for(int j=0; j<totalNodes; j++) {
				async {
                			int distanceMat[] = new int[totalNodes], i=0;
                			boolean flag = false;
                			ArrayList<Integer> queue = new ArrayList<Integer>();
                			for(i=0; i<totalNodes; i++)
                        			distanceMat[i] = Integer.MAX_VALUE;

                			queue.add(j);
                			distanceMat[j] = 0;

                			while(queue.size() > 0) {
                        			int anode = queue.get(0);
                        			queue.remove(0);

                        			for(i=0; i<totalNodes; i++)
                                			if(adj_graph[anode][i] == 1 && distanceMat[i] == Integer.MAX_VALUE) {
                                        			distanceMat[i] = distanceMat[anode]+1;
                                        			queue.add(i);
                                			}
                			}

                			for(i=0; i<totalNodes; i++)
                        			if(diameter[j] < distanceMat[i])
                                			diameter[j] = distanceMat[i];
                		}
			}
		}
		
		int maxDiameter = Integer.MAX_VALUE;
		for(int j=0; j<totalNodes; j++)
			if(maxDiameter > diameter[j])
				maxDiameter = diameter[j];

		return maxDiameter;
        }

	/** 
	 * Writes the output to the user specified file.
	 * 
	 * @param  fileName	Name of the file in which output has to be stored.
	 * @throws 		input output exception if a failure in write occurs.
	 */
        void printDecision(String fileName) throws IOException{
                int i;
                Writer output = null;
                output = new BufferedWriter(new FileWriter(fileName));
                output.write("\nNon traitor nodes: ");
                for(i=0; i<nodes; i++)
                      output.write("\nNode " + allNodes[i].id + ":\t" + "Decision Taken: " + allNodes[i].decision + "\t Permanent: " + allNodes[i].permanent);

                output.write("\nTraitor nodes: ");
                for(i=0; i<traitorCount; i++)
                      output.write("\nNode " + allNodes[nodes+i].id + ":\t" + "Decision Taken: " + allNodes[nodes+i].decision + "\t Permanent: " + allNodes[nodes+i].permanent);
                output.close();
        }

	/** Validates the output resulting from the execution of the algorithm. */
        void outputVerifier() {
                int sum=0;
                for(int i=0; i<nodes; i++)
                	if(!ifTraitor[i])
		        	sum = sum + allNodes[i].decision;

                if((sum == totalNodes - traitorCount) || (sum == 0))
                        System.out.println("Output verified");
        }
}

/** States the structure of message to be transmitted. */
class Message
{
	int source;
	int vote;
	
	void setMessage(int source, int vote) {
		this.source = source;
		this.vote = vote;
	}
}

/**
 * <code>Nd</code> specifies the structure for each abstract node
 * part of the Byzantine algorithm.
 */
class Nd 
{
	/** Specifies the identifier for each node. */
	int id;
	
	/** Specifies the decision of a node. */
        int decision;
        
        /** Specifies the decision made by a node is set premanent or not. */
        int permanent;
        
        /** Set of vote to be send a node. */
        int vote[];
        
        /** Set of vote received by a node from all other nodes. */
        boolean voteReceived[];
        
        /** Enumerates the neighbors of a node. */
        int neighbors[];
        
        /** Holds the messages sent by a node. */
        ArrayList<Message> messageHolder = new ArrayList<Message>();
        ArrayList<Message> tempMessageHolder = new ArrayList<Message>();
        
	/** Set of votes received. */        
        ArrayList<Integer> receive = new ArrayList<Integer>();
}

