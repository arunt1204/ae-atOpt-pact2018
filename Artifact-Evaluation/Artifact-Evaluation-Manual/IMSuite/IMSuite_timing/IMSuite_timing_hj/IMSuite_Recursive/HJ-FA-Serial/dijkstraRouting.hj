/* This file is part of IMSuite Benchamark Suite.
 * 
 * This file is licensed to You under the Eclipse Public License (EPL);
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * (C) Copyright IMSuite 2013-present.
 */
 
import java.io.*;
import java.util.*;

/** 
 * dijkstraRouting aims to create a rounting table specific for each
 * node, consistingNodes can be classified as traitors and non-traitors. 
 * Traitors aim to disrupt the consensus.
 *
 * @author Suyash Gupta
 * @author V Krishna Nandivada
 */
public class dijkstraRouting 
{
	int adj_graph[][], weightMatrix[][], nodes, Infinity = Integer.MAX_VALUE;
	
	/** Parameters to enable execution with load */
	long loadValue=0, nval[];
	
	/** Abstract node representation */
	Node nodeSet[];
	
	/** 
	 * Acts as the starting point for the program execution. 
	 * <code>main</code> performs the task of accepting the input from the user 
	 * specified file, calling the methods responsible for BFS tree creation, 
	 * printing the output and validating the result.
	 *
	 * @param args 		array of runtime arguments.
	 * @throws Exception	if File handling operation illegal. 
	 */
	public static void main(String []args)	throws Exception {
		String inputFile = "inputdijkstraRouting16.txt", outputFile = "outputDijkstraRouting.txt";
		int j=0, i;
		boolean flag = false;
		
		dijkstraRouting djr = new dijkstraRouting(); 
		for(i=0; i<args.length; i++) {
			if(args[i].equals("-ver") || args[i].equals("-verify"))
				flag = true;
			else if(args[i].equals("-in")) {
				inputFile = args[i+1];
				i++;
			}	
			else if(args[i].equals("-out")) {
				outputFile = args[i+1];
				i++;
			}
			else if(args[i].equals("-lfon")) {
				djr.loadValue = Long.parseLong(args[i+1]);
				i++;
			}
			else
				System.out.println("Wrong option specified");		
		}

		FileReader fr = new FileReader(inputFile);
		BufferedReader br = new BufferedReader(fr);
		String s = br.readLine();
		
		djr.nodes = Integer.parseInt(s);
		djr.adj_graph = new int[djr.nodes][djr.nodes];
		djr.weightMatrix = new int[djr.nodes][djr.nodes];		
		djr.nodeSet = new Node[djr.nodes];
		djr.nval = new long[djr.nodes];

		while(!((s = br.readLine()).equals(" "))) {
			for(i=0; i<s.length(); i++)
				djr.adj_graph[j][i] = Character.digit(s.charAt(i), 10);
			j++;
		}
		
		j=0;
		while(j<djr.nodes) {
			i=0;
			while(i<djr.nodes) {
				s = br.readLine();
				djr.weightMatrix[j][i] = Integer.parseInt(s);
				i++;
			}
			j++;
		}

		djr.initialize();
		
		long startTime = System.nanoTime();
		djr.route();
		long finishTime = System.nanoTime();
		long estimatedTime = finishTime - startTime;
		System.out.println("Start Time: " + startTime + "\t Finish Time: " + finishTime + "\t Estimated Time: " + estimatedTime);

		djr.printTables(outputFile);
		
		if(flag)
			djr.outputVerifier();

		if(djr.loadValue != 0) {
			double sumval=0;
                        for(i=0; i<djr.nodes; i++)
                                sumval = sumval + djr.nval[i];

			if(sumval > 0)
                                System.out.println();
		}
	}

	/** Initializes all the fields of the abstract node. */ 
	void initialize() {
		//finish {
			for(int i=0; i<nodes; i++) {
				//async {
					int j,count=0;
					nodeSet[i] = new Node();
					nodeSet[i].id = i;
					nodeSet[i].routingTable = new routingInfo[nodes];
					for(j=0; j<nodes; j++) {
						nodeSet[i].routingTable[j] = new routingInfo();
						if(adj_graph[i][j] == 1)
							count++;
					}
					
					nodeSet[i].neighbors = new int[count];
					count=0;
					for(j=0; j<nodes; j++)
						if(adj_graph[i][j] == 1) {
							nodeSet[i].neighbors[count] = j;
							count++;
						}	
				//}
			}
		//}
	}


	/**
	 * Aims to busy the threads by introducing the no-op instructions
	 * equivalent to the amount of load specified.
	 *
	 * @param  weight	Specifies the current load value for a thread.
	 * @return 		Updated load value.
	 */	
	long loadweight(long weight) {
                long j=0;
                for(long i=0; i<loadValue; i++)
                        j++;
                return j+weight;
        }

	/** Generates the routing table for each node. */
	void route() {
		//finish {
			for(int i=0; i<nodes; i++) {
				//async {
					int j, minCost, node=-1, hCount=0, nrt=0, maxHop=0;
					int parent[] = new int[nodes];
					boolean notLeaf[] = new boolean[nodes];
					boolean nodeCovered[] = new boolean[nodes];
					ArrayList<routingInfo> queue = new ArrayList<routingInfo>();
			
					routingInfo rtf = new routingInfo();
					parent[i] = Infinity;
					rtf.setVlue(i, 0, 0, i);
					queue.add(rtf);
					
					while(queue.size() > 0) {
						minCost=Infinity;
						for(j=queue.size()-1; j>=0; j--) {
							rtf = queue.get(j);
							if(minCost > rtf.costToReach) {
								minCost = rtf.costToReach;
								node = rtf.nodeId;
								hCount = rtf.hopCount;
								nrt = rtf.nextNode;
							}
						}
						
						rtf = new routingInfo();
						rtf.setVlue(node, minCost, hCount, nrt);
						if(node != i) {
							parent[node] = nrt;
							notLeaf[parent[node]] = true;
						}
						nodeSet[i].routingTable[node] = rtf;
						nodeCovered[node] = true;
						for(j=queue.size()-1; j>=0; j--) {
							rtf = queue.get(j);
							if(rtf.nodeId == node)
								queue.remove(j);
						}

						int sz = nodeSet[node].neighbors.length;
						int neighborSet[] = new int[sz];
						neighborSet = nodeSet[node].neighbors;
						for(j=0; j<sz; j++) {
							if(!nodeCovered[neighborSet[j]]) {
								rtf = new routingInfo();
								rtf.setVlue(neighborSet[j], minCost + weightMatrix[node][neighborSet[j]], hCount+1, node);
								queue.add(rtf);			
							}
						}
					}    
					
					//finish {
						for(int k=0; k<nodeSet[i].neighbors.length; k++) {
							//async {
								if(parent[nodeSet[i].neighbors[k]] == i) {
									neighborTask(i, nodeSet[i].neighbors[k], parent, notLeaf);
									nodeSet[i].routingTable[nodeSet[i].neighbors[k]].nextNode = i;
								}

								if(loadValue != 0)
									nval[i] = loadweight(nval[i]+i);
							//}
						}
					//}

					if(loadValue != 0)
						nval[i] = loadweight(nval[i]+i);
				//}
			}
		//}						
	}

	/**
	 * Associates each neighbor of a node to provide the next node information.
	 *
	 * @param  sender	node whose routing table has to be updated
	 * @param  aNode	neighbor of <code>sender<\code> which needs to update information
	 * @param  parent	information about parent of a node according to <code>sender<\code>
	 * @param  notLeaf	tells which node is leaf or not.	
	 */
	void neighborTask(int sender, int aNode, int parent[], boolean notLeaf[]) {
		for(int k=0; k<nodeSet[aNode].neighbors.length; k++)
			if(parent[nodeSet[aNode].neighbors[k]] == aNode)
				findNextNode(sender, aNode, nodeSet[aNode].neighbors[k], parent, notLeaf);
	}
	
	/**
	 * Provides the next node information.
	 * @param  pNode	node whose routing table has to be updated
	 * @param  uNode	node which acts as the next node information
	 * @param  aNode	node whose entry in <code>pNode<\code> routing table has to be updated 
	 * @param  parent	information about parent of a node according to <code>sender<\code>
	 * @param  notLeaf	tells which node is leaf or not.	
	 */
	void findNextNode(int pNode, int uNode, int aNode, int parent[], boolean notLeaf[]) {
		if(!notLeaf[aNode]) {
			nodeSet[pNode].routingTable[aNode].nextNode = uNode;
			return;
		}
		else {
			nodeSet[pNode].routingTable[aNode].nextNode = uNode;
			//finish {
				for(int j=0; j<nodeSet[aNode].neighbors.length; j++) {
					//async {
						if(parent[nodeSet[aNode].neighbors[j]] == aNode)
							findNextNode(pNode, uNode, nodeSet[aNode].neighbors[j], parent, notLeaf);
						if(loadValue != 0)
							nval[aNode] = loadweight(nval[aNode]+aNode);
					//}	
				}
			//}	
		}
	}
	
	/** 
	 * Writes the output to the user specified file.
	 * 
	 * @param  fileName	Name of the file in which output has to be stored.
	 * @throws 		input output exception if a failure in write occurs.
	 */
	void printTables(String fileName) throws Exception {
	  	Writer output = null;
	  	output = new BufferedWriter(new FileWriter(fileName));	
		for(int i=0; i<nodes; i++) {
			output.write("\n Routing Table for Node " + nodeSet[i].id);
			for(int j=0; j<nodes; j++)
				output.write("\n Node " + nodeSet[i].routingTable[j].nodeId + "\t Cost to reach: " + nodeSet[i].routingTable[j].costToReach + "\t Hops to Reach: " + nodeSet[i].routingTable[j].hopCount + "\t Next Node: " + nodeSet[i].routingTable[j].nextNode);
			output.write("\n");	
		}
		output.close();
	}
	
	/** Validates the output resulting from the execution of the algorithm. */
	void outputVerifier() {
		int i, j;
		boolean flag=false;
		
		for(i=0; i<nodes; i++) {
			for(j=0; j<nodes; j++)
				if(i != j)
					if((nodeSet[i].routingTable[j].costToReach != nodeSet[j].routingTable[i].costToReach ) && (nodeSet[i].routingTable[j].hopCount != nodeSet[j].routingTable[i].hopCount)){
						flag = true;
						break;
					}
			if(flag)
				break;
		}
		if(!flag)
			System.out.println("Output verified");
	}
}

/** States the structure for the routing table. */
class routingInfo
{
	/** Specifies identifier of the destination node. */
	int nodeId;
	
	/** Specifies the hops needed to reach the destination node. */ 
	int hopCount;
	
	/** Specifies the cost of the path to reach source. */
	int costToReach;
	
	/** Identifies the first node on path to destination node from source. */
	int nextNode;	
	
	void setVlue(int nodeId, int costToReach, int hopCount, int nextNode) {
		this.nodeId = nodeId;
		this.costToReach = costToReach;
		this.hopCount = hopCount;
		this.nextNode = nextNode;
	}
}

/**
 * <code>Node</code> specifies the structure for each abstract node
 * part of the Dijkstra Routing algorithm.
 */
class Node
{
	/** Specifies identifier of the source router. */ 
	int id;
	
	/** Specifies neighbors of the router. */
	int neighbors[];
	
	/** Routing table structure. */							
	routingInfo routingTable[];
	
	/** Holder for receiving the messages. */
	ArrayList<routingInfo> messageHolder = new ArrayList<routingInfo>();
}	
